{"version":3,"sources":["Components/Input/Input.js","Components/SignUp/SignUp.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","inputType","type","htmlFor","Math","random","className","label","value","onChange","valid","touched","shouldValidate","isInvalid","errorMessage","SignUp","useState","fistName","setFirstName","firstNameTouched","setFirstNameTouched","fistNameValid","setFirstNameValid","lastName","setLastName","lastNameTouched","setLastNameTouched","lastNameValid","setLastNameValid","email","setEmail","emailTouched","setEmailTouched","emailValid","setEmailValid","password","setPassword","passwordTouched","setPasswordTouched","passwordValid","setPasswordValid","confirmPassword","setConfirmPassword","confirmPasswordTouched","setConfirmPasswordTouched","confirmPasswordValid","setConfirmPasswordalid","formControls","firstName","validation","required","checkPasswords","validateControl","console","log","isValid","trim","test","String","toLowerCase","validateEmail","validatePassword","onSubmit","event","preventDefault","map","controlName","index","control","key","target","onChangeHandler","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e3579905.chunk.js","sourcesContent":["import React from 'react';\nimport './Input.css';\n\nfunction isInvalid({valid, touched, shouldValidate}) {\n    return !valid && shouldValidate && touched; \n}\n\nconst Input = (props) => {\n    const inputType = props.type || 'text';\n    const htmlFor = `${inputType}=${Math.random()}`;\n\n    return (\n        <>\n            <label htmlFor={htmlFor} className='label'>{props.label}</label>\n            <input\n                className='input'\n                type={inputType}\n                value={props.value}\n                onChange={props.onChange}\n            />\n            <div className='error-container'>\n                {\n                    isInvalid(props) \n                    ? <span> {props.errorMessage || 'This field is required' } </span> \n                    : null \n                }\n            </div>\n        </>\n    );\n}\n\nexport default Input\n\n","import React, { useState } from 'react';\nimport Input from '../Input/Input';\nimport './SignUp.css';\n\nfunction validateEmail(email) {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n}\n\nfunction validatePassword(password) {\n    const re = /(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,64}/;\n    return re.test(password);\n}\n\nconst SignUp = () => {\n\n    const [fistName, setFirstName] = useState('');\n    const [firstNameTouched, setFirstNameTouched] = useState(false);\n    const [fistNameValid, setFirstNameValid] = useState(false);\n\n    const [lastName, setLastName] = useState('');\n    const [lastNameTouched, setLastNameTouched] = useState(false);\n    const [lastNameValid, setLastNameValid] = useState(false);\n\n\n    const [email, setEmail] = useState('');\n    const [emailTouched, setEmailTouched] = useState(false);\n    const [emailValid, setEmailValid] = useState(false);\n\n\n    const [password, setPassword] = useState('');\n    const [passwordTouched, setPasswordTouched] = useState(false);\n    const [passwordValid, setPasswordValid] = useState(false);\n\n\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [confirmPasswordTouched, setConfirmPasswordTouched] = useState(false);\n    const [confirmPasswordValid, setConfirmPasswordalid] = useState(false);\n\n\n    const formControls = [\n        {\n            firstName: {\n                value: fistName,\n                label: 'First name',\n                type: 'text',\n                errorMessage: 'Please enter your name',\n                valid: fistNameValid,\n                touched: firstNameTouched,\n                validation: {\n                    required: true\n                }\n            }\n        },\n        {\n            lastName: {\n                value: lastName,\n                label: 'Last name',\n                type: 'text',\n                errorMessage: 'Please enter your last name',\n                valid: lastNameValid,\n                touched: lastNameTouched,\n                validation: {\n                    required: true\n                }\n            }\n        },\n        {\n            email: {\n                value: email,\n                type: 'email',\n                label: 'Email',\n                errorMessage: 'Please enter a valid email',\n                valid: emailValid,\n                touched: emailTouched,\n                validation: {\n                    required: true,\n                    email: true\n                }\n            }\n        },\n        {\n            password: {\n                value: password,\n                type: 'Password',\n                label: 'Password',\n                errorMessage: 'Your password needs to be 8-64 characters long and contain one uppercase letter and a number',\n                valid: passwordValid,\n                touched: passwordTouched,\n                validation: {\n                    required: true,\n                    password: true\n                }\n            }\n        },\n        {\n            confirmPassword: {\n                value: confirmPassword,\n                label: 'Confirm password',\n                type: 'password',\n                errorMessage: 'Please make sure your passwords match',\n                valid: confirmPasswordValid,\n                touched: confirmPasswordTouched,\n                validation: {\n                    required: true,\n                    checkPasswords: true\n                }\n            }\n        }\n    ]\n\n\n    const submitHandler = event => {\n        event.preventDefault();\n    }\n\n    const onChangeHandler = (event, controlName, control) => {\n\n        if (controlName === 'firstName') {\n            setFirstName(event.target.value);\n            setFirstNameTouched(true);\n            setFirstNameValid(validateControl(event.target.value, control.validation));\n\n        }\n        if (controlName === 'lastName') {\n            setLastName(event.target.value);\n            setLastNameTouched(true);\n            setLastNameValid(validateControl(event.target.value, control.validation));\n        }\n        if (controlName === 'email') {\n            setEmail(event.target.value);\n            setEmailTouched(true);\n            setEmailValid(validateControl(event.target.value, control.validation));\n        }\n        if (controlName === 'password') {\n            setPassword(event.target.value);\n            setPasswordTouched(true);\n            setPasswordValid(validateControl(event.target.value, control.validation));\n        }\n        if (controlName === 'confirmPassword') {\n            setConfirmPassword(event.target.value);\n            setConfirmPasswordTouched(true);\n            setConfirmPasswordalid(validateControl(event.target.value, control.validation));\n        }\n\n    }\n\n    const validateControl = (value, validation) => {\n        console.log(formControls[password.value]);\n        if (!validation) {\n            return true;\n        }\n\n        let isValid = true;\n\n        if (validation.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (validation.email) {\n            isValid = validateEmail(value) && isValid;\n        }\n\n        if (validation.password) {\n            isValid = validatePassword(value) && isValid;\n        }\n\n        if (validation.checkPasswords) {\n            isValid = (password === value) && isValid;\n        }\n\n        return isValid;\n    }\n\n    return (\n        <div className={'signup-container'}>\n            <h1>Sign Up</h1>\n            <form\n                onSubmit={submitHandler}\n                className={'signup-form'}>\n                {formControls.map((controlName, index) => {\n                    let control;\n                    for (let key in controlName) {\n                        control = controlName[key];\n                        controlName = key;\n                    }\n                    return (\n                        < Input\n                            key={controlName + index}\n                            type={control.type}\n                            value={control.value}\n                            valid={control.valid}\n                            touched={control.touched}\n                            label={control.label}\n                            shouldValidate={!!control.validation}\n                            errorMessage={control.errorMessage}\n                            onChange={event => onChangeHandler(event, controlName, control)}\n                        />\n                    )\n                })\n                }\n                <div className='btn-wrapper'>\n                    <button>Submit</button>\n                </div>\n            </form>\n        </div>\n    )\n\n}\n\nexport default SignUp","import React from 'react';\nimport SignUp from './Components/SignUp/SignUp';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SignUp />\n    </div>\n  );\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}